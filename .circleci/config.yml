# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            python -m pytest tests

      - store_artifacts:
          path: test-reports
          destination: test-reports
          
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build and push Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              export TAG=1.0.${CIRCLE_BUILD_NUM}
            elif [ "${CIRCLE_BRANCH}" == "develop" ]; then
              export TAG=dev
            elif [ "${CIRCLE_BRANCH}" == "beta" ]; then
              export TAG=beta
            else
              echo "Not building other branch"
              exit 0;
            fi
            docker build -t paloaltonetworks/panos-bootstrapper:$TAG .
            echo ${DOCKER_PWD} | docker login -u ${DOCKER_LOGIN} --password-stdin
            docker push paloaltonetworks/panos-bootstrapper:$TAG
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker tag paloaltonetworks/panos-bootstrapper:$TAG paloaltonetworks/panos-bootstrapper:latest
              docker push paloaltonetworks/panos-bootstrapper:latest
            fi